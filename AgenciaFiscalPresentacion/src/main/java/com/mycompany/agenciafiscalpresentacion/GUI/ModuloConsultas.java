/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.agenciafiscalpresentacion.GUI;

import bo.ConsultasBO;
import com.toedter.calendar.JDateChooser;
import excepciones.NegocioException;
import java.awt.CardLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import negocioDTO.PersonaDTO;
import negocioDTO.TramiteDTO;

/**
 *
 * @author luiis
 */
public class ModuloConsultas extends javax.swing.JPanel {

    private List<PersonaDTO> personasEncontradas;
    private List<PersonaDTO> personasEncontradasCopia;
    private DefaultListModel<String> modeloLista;
    private JTextField txtDato;
    private JDateChooser jdcFecha;
    private static PersonaDTO personaSeleccionada;
    /**
     * Creates new form ModuloConsultas
     */
    public ModuloConsultas() {
        initComponents();
        iniciar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnRegresar = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        CampoDeInformacion = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jrbCurp = new javax.swing.JRadioButton();
        jrbNacimiento = new javax.swing.JRadioButton();
        jrbNombre = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        jListPersonas = new javax.swing.JList<>();
        btnBuscar = new javax.swing.JButton();
        PanelDato = new javax.swing.JPanel();
        ContenedorDeTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersonas = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(138, 47, 47));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 640, 40));

        jPanel4.setBackground(new java.awt.Color(35, 26, 26));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        jPanel5.setBackground(new java.awt.Color(98, 76, 76));
        jPanel5.setPreferredSize(new java.awt.Dimension(200, 60));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel6.setFont(new java.awt.Font("Avenir Next", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Módulo de consultas");
        jPanel5.add(jLabel6, new java.awt.GridBagConstraints());

        jPanel4.add(jPanel5);

        add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 220, 80));

        jPanel3.setBackground(new java.awt.Color(138, 47, 47));

        btnRegresar.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        btnRegresar.setForeground(new java.awt.Color(0, 0, 0));
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRegresar)
                .addContainerGap(543, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRegresar)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, -1));

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.LINE_AXIS));

        CampoDeInformacion.setBackground(new java.awt.Color(255, 255, 255));
        CampoDeInformacion.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ingrese informacion solicitada");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 24;
        gridBagConstraints.ipady = 24;
        CampoDeInformacion.add(jLabel1, gridBagConstraints);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        buttonGroup1.add(jrbCurp);
        jrbCurp.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        jrbCurp.setForeground(new java.awt.Color(0, 0, 0));
        jrbCurp.setText("CURP");
        jrbCurp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jrbCurp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jrbCurp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrbCurpStateChanged(evt);
            }
        });
        jrbCurp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCurpActionPerformed(evt);
            }
        });
        jPanel7.add(jrbCurp);

        buttonGroup1.add(jrbNacimiento);
        jrbNacimiento.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        jrbNacimiento.setForeground(new java.awt.Color(0, 0, 0));
        jrbNacimiento.setText("Año de nacimiento");
        jrbNacimiento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jrbNacimiento.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jrbNacimiento.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrbNacimientoStateChanged(evt);
            }
        });
        jrbNacimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbNacimientoActionPerformed(evt);
            }
        });
        jPanel7.add(jrbNacimiento);

        buttonGroup1.add(jrbNombre);
        jrbNombre.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        jrbNombre.setForeground(new java.awt.Color(0, 0, 0));
        jrbNombre.setText("Nombre de persona");
        jrbNombre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jrbNombre.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jrbNombre.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrbNombreStateChanged(evt);
            }
        });
        jPanel7.add(jrbNombre);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        CampoDeInformacion.add(jPanel7, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setMinimumSize(new java.awt.Dimension(0, 60));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jListPersonas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane.setViewportView(jListPersonas);

        jPanel6.add(scrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 239, 60));

        btnBuscar.setFont(new java.awt.Font("Avenir Next", 1, 12)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(0, 0, 0));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        PanelDato.setBackground(new java.awt.Color(255, 102, 102));
        PanelDato.setMinimumSize(new java.awt.Dimension(20, 20));
        PanelDato.setPreferredSize(new java.awt.Dimension(0, 20));
        PanelDato.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PanelDato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBuscar)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelDato, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        CampoDeInformacion.add(jPanel1, gridBagConstraints);

        jPanel8.add(CampoDeInformacion);

        ContenedorDeTabla.setBackground(new java.awt.Color(255, 255, 255));
        ContenedorDeTabla.setPreferredSize(new java.awt.Dimension(330, 0));
        ContenedorDeTabla.setLayout(new java.awt.BorderLayout());

        tblPersonas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Trámite", "Costo (mxn)", "Estado", "Fecha emisión"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblPersonas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(tblPersonas);

        ContenedorDeTabla.add(jScrollPane1, java.awt.BorderLayout.PAGE_START);

        jPanel8.add(ContenedorDeTabla);

        add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 640, 230));
    }// </editor-fold>//GEN-END:initComponents

    private void jrbCurpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCurpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jrbCurpActionPerformed

    private void jrbNacimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbNacimientoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jrbNacimientoActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        regresarMenu();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        //PersonaDTO persona=getPersonaDTOSeleccionada();
        if(personaSeleccionada!=null){
            setTablaTramites(personaSeleccionada);
        }else{
            System.out.println("no persona seleccionada");
            
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jrbNombreStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jrbNombreStateChanged
        // TODO add your handling code here:
        tblPersonas.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jrbNombreStateChanged

    private void jrbNacimientoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jrbNacimientoStateChanged
        // TODO add your handling code here:
        tblPersonas.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jrbNacimientoStateChanged

    private void jrbCurpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jrbCurpStateChanged
        // TODO add your handling code here:
        tblPersonas.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jrbCurpStateChanged

    private void setListenerDateChooser(){
        jdcFecha.addPropertyChangeListener(new PropertyChangeListener(){
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                Calendar fecha=jdcFecha.getCalendar();
                if(fecha!=null){
                    buscarPersonasPorFechaNacimiento(fecha);
                    actualizarJList();
                }
            }
            
        });
    }
    
    private void validarDatoBusqueda(){
        Document doc = txtDato.getDocument();
        doc.addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                validar(e);
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                validar(e);
                //personaSeleccionada=null;
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                validar(e);
            }

            private void validar(javax.swing.event.DocumentEvent e) {
                personaSeleccionada=null;
                try {
                    Document doc = e.getDocument();
                    String texto = doc.getText(0, doc.getLength());
                    if (jrbNombre.isSelected()) {
                        if (texto.isBlank()) {
                            if(personasEncontradas!=null)
                                personasEncontradas.clear();
                        } else if (texto.matches("^[A-Za-z ]+$")) {
                            buscarPersonasPorNombre(texto);
                        }
                        actualizarJList();
                    } else if (jrbCurp.isSelected()) {
                        if (texto.isBlank()) {
                            if(personasEncontradas!=null)
                                personasEncontradas.clear();
                        } else{
                            buscarPersonasPorCurp(texto);
                        }
                        actualizarJList();
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(ModuloConsultas.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }
    
    private void setTablaTramites(PersonaDTO persona){
        List<TramiteDTO> tramites;
        try {
            tramites = Ventanas.consultas.consultarTramitesPorPersona(persona);
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
            return;
        }
        List<List<String>> datos=new ArrayList<>();
        List<String> registros;
        for(TramiteDTO t : tramites) {
            registros=new ArrayList<>();
            registros.add(t.getClass().getSimpleName());
            registros.add(String.valueOf(t.getCostoMxn()));
            registros.add(t.getEstado().toString());
            registros.add(t.fechaToString(t.getFechaEmision()));
            datos.add(registros);
        }
        Object[][] filas = new Object[datos.size()][4];
        int contador = 0;
        for (List<String> lista : datos) {
            filas[contador][0]=lista.get(0);
            filas[contador][1]=lista.get(1);
            filas[contador][2]=lista.get(2);
            filas[contador][3]=lista.get(3);
            contador++;
        }
        List<String> columnas = new ArrayList<>();
        columnas.add("Tramite");
        columnas.add("Costo");
        columnas.add("Estado");
        columnas.add("Fecha emision");

        DefaultTableModel modeloTabla = new DefaultTableModel(filas, columnas.toArray());
        tblPersonas.setModel(modeloTabla);

    }
    
    private PersonaDTO getPersonaDTOSeleccionada(String nombrePersona){
        if(!personasEncontradasCopia.isEmpty()){
            for (PersonaDTO persona : personasEncontradasCopia) {
                //System.out.println("getPersonaDTO: "+persona.getNombreCompleto().equals(nombrePersona));
                if (persona.getNombreCompleto().equals(nombrePersona)) {
                    return persona;
                }
            }  
        }System.out.println("esta vacia la copia de personas enc");
        return null;
    }
    
    private void actualizarJList() {
        modeloLista.clear();
        if(personasEncontradas!=null && !personasEncontradas.isEmpty()){
            List<String> lista = nombresPersonas();
            for (String nombrePersona : lista) {
                modeloLista.addElement(nombrePersona);
            }
            jListPersonas.setModel(modeloLista);
            scrollPane.setVisible(true);
            jListPersonas.setVisible(true);
        }else{
            scrollPane.setVisible(false);
        }
            
    }
    
    private List<String> nombresPersonas(){
        List<String> nombres = new ArrayList<>();
        for (PersonaDTO p : personasEncontradas) {
            nombres.add(p.getNombreCompleto());
        }
        return nombres;
    }
    
    private void buscarPersonasPorFechaNacimiento(Calendar fecha){
        PersonaDTO persona = new PersonaDTO();
        persona.setFechaNacimiento(fecha);
        //personasEncontradas.clear();
        try {
            personasEncontradas = Ventanas.consultas.consultarPersonasPorCriterio(persona,"fechaNacimiento");
            if(personasEncontradas!=null){
                System.out.println(scrollPane.isVisible());
                personasEncontradasCopia.clear();
                for(PersonaDTO p: personasEncontradas){
                    personasEncontradasCopia.add(p);
                    System.out.println(p);
                }
                System.out.println("-------se encontraron personas-------");
                for (PersonaDTO p : personasEncontradas) {
                    System.out.println(p.fechaToString());
                }
//                System.out.println("personas encontradas copia");
//                for (PersonaDTO p : personasEncontradasCopia) {
//                    System.out.println(p.getNombreCompleto());
//                }
            }else System.out.println("Lista vacia");
            
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void buscarPersonasPorCurp(String curp){
        PersonaDTO persona = new PersonaDTO();
        persona.setCurp(curp);
        //personasEncontradas.clear();
        try {
            personasEncontradas = Ventanas.consultas.consultarPersonasPorCriterio(persona,"curp");
            if(personasEncontradas!=null){
//                System.out.println(scrollPane.isVisible());
                personasEncontradasCopia.clear();
                for(PersonaDTO p: personasEncontradas){
                    personasEncontradasCopia.add(p);
                    System.out.println(p);
                }
//                System.out.println("-------se encontraron personas-------");
//                for (PersonaDTO p : personasEncontradas) {
//                    System.out.println(p.getCurp());
//                }
//                System.out.println("personas encontradas copia");
//                for (PersonaDTO p : personasEncontradasCopia) {
//                    System.out.println(p.getNombreCompleto());
//                }
            }else System.out.println("Lista vacia");
            
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void buscarPersonasPorNombre(String nombreABuscar){
        PersonaDTO persona = new PersonaDTO();
        persona.setNombreCompleto(nombreABuscar);
        //personasEncontradas.clear();
        try {
            personasEncontradas = Ventanas.consultas.consultarPersonasPorCriterio(persona,"nombre");
            if(personasEncontradas!=null){
//                System.out.println(scrollPane.isVisible());
                personasEncontradasCopia.clear();
                for(PersonaDTO p: personasEncontradas){
                    personasEncontradasCopia.add(p);
//                    System.out.println(p);
                }
//                System.out.println("-------se encontraron personas-------");
//                for (PersonaDTO p : personasEncontradas) {
//                    System.out.println(p.getNombreCompleto());
//                }
//                System.out.println("personas encontradas copia");
//                for (PersonaDTO p : personasEncontradasCopia) {
//                    System.out.println(p.getNombreCompleto());
//                }
            }else System.out.println("Lista vacia");
            
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void iniciar(){
        Ventanas.consultas = new ConsultasBO();
        personasEncontradas = new ArrayList<>();
        modeloLista = new DefaultListModel<>();
        personasEncontradasCopia=new ArrayList<>();
        jListPersonas.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    //List<PersonaDTO> personasEncontradasCopiaa=personasEncontradas;
                    if (personasEncontradasCopia.isEmpty()) {
                        System.out.println("is empty");
                    }
                    String nombrePersonaSeleccionada = jListPersonas.getSelectedValue();
                    if (nombrePersonaSeleccionada != null) {
                        System.out.println("persona sel: " + nombrePersonaSeleccionada);
                        txtDato.setText(nombrePersonaSeleccionada);

                        personaSeleccionada = getPersonaDTOSeleccionada(nombrePersonaSeleccionada);
                        System.out.println(personaSeleccionada.toString());
                        btnBuscar.setEnabled(true);
                    }
                }
            }
        });
        
        txtDato = new JTextField();
        txtDato.setSize(PanelDato.getWidth(), PanelDato.getHeight());
        txtDato.setEnabled(false);
        
        jdcFecha = new JDateChooser();
        jdcFecha.setDateFormatString("d MMM y");
        jdcFecha.setSize(PanelDato.getWidth(), PanelDato.getHeight());
        jdcFecha.addPropertyChangeListener(new PropertyChangeListener(){
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                Calendar fecha=jdcFecha.getCalendar();
                if(fecha!=null){
                    buscarPersonasPorFechaNacimiento(fecha);
                    actualizarJList();
                }
            }
            
        });
        
        PanelDato.add(txtDato, "txtDato");
        PanelDato.add(jdcFecha, "jdcFecha");
        
        jrbCurp.addActionListener(e -> {
            ((CardLayout) PanelDato.getLayout()).show(PanelDato, "txtDato");
            txtDato.setEnabled(true);
            txtDato.setText("");
        });
        jrbNacimiento.addActionListener(e -> {
            ((CardLayout) PanelDato.getLayout()).show(PanelDato, "jdcFecha");
            jdcFecha.setDate(null);
        });
        jrbNombre.addActionListener(e -> {
            ((CardLayout) PanelDato.getLayout()).show(PanelDato, "txtDato");
            txtDato.setEnabled(true);
            txtDato.setText("");
        });
        
        
        jListPersonas.setModel(modeloLista);
        jListPersonas.setVisible(true);
        scrollPane.setVisible(true);
        actualizarJList();
        validarDatoBusqueda();
        btnBuscar.setEnabled(false);
        
        
    }
    
    private void regresarMenu() {
        reiniciarPanel();
        ((Ventanas) SwingUtilities.getWindowAncestor(this)).mostrarVentana("MenuJpanel");
    }

    public void reiniciarPanel() {
        limpiarDatos();
        txtDato.setEnabled(false);
        ((CardLayout) PanelDato.getLayout()).show(PanelDato, "txtDato");
        
    }
    
    public void limpiarDatos() {
        buttonGroup1.clearSelection();
        txtDato.setText("");
        tblPersonas.removeAll();
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CampoDeInformacion;
    private javax.swing.JPanel ContenedorDeTabla;
    private javax.swing.JPanel PanelDato;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jListPersonas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton jrbCurp;
    private javax.swing.JRadioButton jrbNacimiento;
    private javax.swing.JRadioButton jrbNombre;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tblPersonas;
    // End of variables declaration//GEN-END:variables
}
